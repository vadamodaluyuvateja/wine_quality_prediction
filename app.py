# -*- coding: utf-8 -*-
"""Untitled106.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15IPwa25upO5WjhqIDu1wrcZ7yWCLQcja
"""

import pandas as pd
import joblib
from sklearn.pipeline import Pipeline
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.ensemble import RandomForestRegressor, GradientBoostingRegressor
from sklearn.svm import SVR
from sklearn.preprocessing import StandardScaler
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, r2_score
import streamlit as st


df = pd.read_csv("1.WineQT.csv")
#df = pd.read_csv("/content/1.WineQT.csv")


X = df.drop(['quality', 'Id'], axis=1)
y = df['quality']


X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)


models = {
    "Linear Regression": LinearRegression(),
    "Decision Tree": DecisionTreeRegressor(),
    "Random Forest": RandomForestRegressor(),
    "Support Vector Regression": SVR(),
    "Gradient Boosting": GradientBoostingRegressor()
}


results = {}


for model_name, model in models.items():
    pipeline = Pipeline(steps=[
        ('scaler', StandardScaler()),
        ('regressor', model)
    ])
    pipeline.fit(X_train, y_train)


    y_pred = pipeline.predict(X_test)


    mse = mean_squared_error(y_test, y_pred)
    r2 = r2_score(y_test, y_pred)


    results[model_name] = {
        'MSE': mse,
        'R-squared': r2
    }

best_model_name = min(results, key=lambda k: results[k]['MSE'])  # Example: lowest MSE
best_pipeline = Pipeline(steps=[
    ('scaler', StandardScaler()),
    ('regressor', models[best_model_name])
])
best_pipeline.fit(X_train, y_train)
joblib.dump(best_pipeline, 'best_wine_model.pkl')


st.title("Wine Quality Prediction")

fixed_acidity = st.number_input("Fixed Acidity", min_value=0.0, value=7.4)
volatile_acidity = st.number_input("Volatile Acidity", min_value=0.0, value=0.7)
citric_acid = st.number_input("Citric Acid", min_value=0.0, value=0.0)
residual_sugar = st.number_input("Residual Sugar", min_value=0.0, value=1.9)
chlorides = st.number_input("Chlorides", min_value=0.0, value=0.076)
free_sulfur_dioxide = st.number_input("Free Sulfur Dioxide", min_value=0.0, value=11.0)
total_sulfur_dioxide = st.number_input("Total Sulfur Dioxide", min_value=0.0, value=34.0)
density = st.number_input("Density", min_value=0.0, value=0.9978)
pH = st.number_input("pH", min_value=0.0, value=3.51)
sulphates = st.number_input("Sulphates", min_value=0.0, value=0.56)
alcohol = st.number_input("Alcohol", min_value=0.0, value=9.4)


input_data = pd.DataFrame({
    'fixed acidity': [fixed_acidity],
    'volatile acidity': [volatile_acidity],
    'citric acid': [citric_acid],
    'residual sugar': [residual_sugar],
    'chlorides': [chlorides],
    'free sulfur dioxide': [free_sulfur_dioxide],
    'total sulfur dioxide': [total_sulfur_dioxide],
    'density': [density],
    'pH': [pH],
    'sulphates': [sulphates],
    'alcohol': [alcohol]
})


if st.button("Predict Quality"):

    pipeline = joblib.load('best_wine_model.pkl')
    predicted_quality = pipeline.predict(input_data)
    st.success(f'Predicted Quality: {predicted_quality[0]}')



